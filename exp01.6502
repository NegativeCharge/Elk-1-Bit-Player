\ Constants
SHEILA_COUNTER          = &FE06
SHEILA_MISC_CONTROL     = &FE07
OSBYTE                  = &FFF4

DELAY = 1

\ Zero Page
ORG     &7F
 
.pitch                                  SKIP 1
.sample_pointer                         SKIP 2
.control_register_value                 SKIP 1
.speaker_on                             SKIP 1
.speaker_off                            SKIP 1
.last_state                             SKIP 1
.ula_control_register_previous_value    SKIP 1

\ Main Entry Point
ORG     &1100
GUARD   &8000

.player_start
        LDA     #&0F                                            ; Flush selected wait class
        LDX     #&00                                            ; All waits flushed
        JSR     OSBYTE

        SEI                                                     ; Set interrupt disable
        LDA     #&F2                                            ; Read RAM copy of location &FE07 (ULA SHEILA Misc. Control)
        LDX     #&00
        LDY     #&FF
        JSR     OSBYTE                                          ; Old value returned in X

        STX     ula_control_register_previous_value             ; Store old value
        TXA
        AND     #&F8                                            ; Mask - 11111000
        STA     speaker_off                                     ; Store previous FE07 values for CAPS LOCK LED, CASSETTE MOTOR, and DISPLAY MODE 
        ORA     #&02                                            ; Switch on sound generation - 00000010
        STA     speaker_on                                      ; Store previous FE07 value with sound generation enabled
        LDA     #&00
        STA     SHEILA_COUNTER                                  ; Zero the ULA SHEILA counter (FE06), creating a toggle speaker (inaudible frequency)
        LDX     #&00                                            ; Clear X

.init        
        LDA     #LO(sample_data_start)  ; 3
        STA     sample_pointer+0        ; 3 (ZP)

        LDA     #HI(sample_data_start)  ; 3
        STA     sample_pointer+1        ; 3 (ZP)

.main_loop
        LDA     (sample_pointer),y      ; 5 (+1 if crosses page boundary)
        STA     pitch                   ; 3 (ZP)

        LDA     #HI(sample_data_end)    ; 3
        CMP     sample_pointer+1        ; 3
        BNE     continue                ; 2 (3 if branch not taken)

        LDA     #LO(sample_data_end)    ; 3
        CMP     sample_pointer          ; 3
        BNE     continue                ; 2 (3 if branch not taken)

        JMP     playback_end            ; 3 (Absolute)

.continue
        LDX     #&08                    ; 2 (Immediate)

.byte_loop
        CMP     #last_state             ; 3 (ZP)
        BEQ     rotate_bits             ; 2 (3 if branch not taken)

        STA     last_state              ; 3 (ZP)

        ; Test LSB value
        LDA     #&01                    ; 2 (Immediate)
        BIT     pitch                   ; 3 (ZP)
        BNE     turn_speaker_on         ; 2 (3 if branch not taken)

        LDA     speaker_off             ; 3 (ZP)
        STA     SHEILA_MISC_CONTROL     ; 4 (Absolute)

        JMP     rotate_bits             ; 3 (Absolute)

.turn_speaker_on
        LDA     speaker_on              ; 3 (ZP)
        STA     SHEILA_MISC_CONTROL     ; 4 (Absolute)

        BIT     pitch                   ; Waste 3 cycles

.rotate_bits
        ; 8-bit rotate right Value
        LDA     pitch                   ; 3 (ZP)
        LSR     A                       ; 2
        ROR     pitch                   ; 5 (ZP)

        DEX                             ; 2
        BEQ     byte_loopDone           ; 2 (3 if branch not taken)
        JMP     byte_loop               ; 3 (Absolute)

.byte_loopDone
        LDX     #DELAY                  ; 2 (Immediate)
.delay_loop
        DEX                             ; 2 - Decrement X by 1
        BNE     delay_loop              ; 2 (3 if branch not taken) - Loop if not zero

        CLC                             ; 2 - Clear carry
        LDA     sample_pointer          ; 3 - Increment 16-bit sample pointer
        ADC     #&01                    ; 2
        STA     sample_pointer+0        ; 3
        LDA     sample_pointer+1        ; 3
        ADC     #&00                    ; 2
        STA     sample_pointer+1        ; 3

        JMP     main_loop               ; 3 (Absolute)

.playback_end
{
        LDY     speaker_off                             ; 3 - Turn off speaker
        STY     SHEILA_MISC_CONTROL                     ; 4

        LDY     ula_control_register_previous_value     ; 3 - Reset ULA control register to initial value
        STY     control_register_value                  ; 4 - Store y in value to be fed to ULA control register
                
        CLI                                             ; 2 - Clear interrupt disable
        RTS                                             ; 6
}

.sample_data_start
        INCBIN ".\samples\exp01-1.bin"
.sample_data_end
    
.player_end
SAVE "PLAY",player_start,player_end

\ ******************************************************************
\ *	Memory Info
\ ******************************************************************

PRINT "---------------"
PRINT "PLAYER"
PRINT "---------------"
PRINT "CODE size =", ~player_end-player_start
PRINT "---------------"
PRINT "HIGH WATERMARK =", ~P%
PRINT "FREE =", ~player_start+player_end
PRINT "---------------"

\ ******************************************************************
\ * Supporting Files
\ ******************************************************************

PUTBASIC "LOADER","LOADER"
PUTFILE "BOOT","!BOOT",&FFFF